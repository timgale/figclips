{
    "componentChunkName": "component---src-pages-tips-mdx-slug-js",
    "path": "/tips/avatar-stacks/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Avatar Stacks","date":"January 14, 2022","videoSourceURL":"https://www.loom.com/embed/827e8acbfb6d41b89dc721061980b637","videoTitle":"Avatar Stacks","tags":["Auto Layout"]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Avatar Stacks\",\n  \"date\": \"2022-01-14\",\n  \"videoSourceURL\": \"https://www.loom.com/embed/827e8acbfb6d41b89dc721061980b637\",\n  \"videoTitle\": \"Avatar Stacks\",\n  \"excerpt\": \"Create flexible avatar stacks using auto layout\",\n  \"tags\": [\"Auto Layout\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Create flexible avatar stacks using auto layout.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"6cc693a2-2275-5fd5-9bf2-9c367dea5ddc","slug":"avatar-stacks","__params":{"slug":"avatar-stacks"}}},
    "staticQueryHashes": ["3159585216"]}